/*
Copyright (c) 2013 Andrey Penechko

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license the "Software" to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module anchovy.graphics.windows.glfwwindow;

private{
	import std.conv : to;
	import std.stdio;
	import std.string;
	import anchovy.core.interfaces.iwindow;
}

public{
	import derelict.glfw3.glfw3;
	import derelict.opengl3.gl3;
	import anchovy.utils.string;
}

class GlfwWindow : IWindow
{
public:
	override void init(in uint width, in uint height, in string caption)
	{
		if (glfwInited == false)
		{
			initGlfw();
		}
		scope(failure) glfwTerminate();

		w = width; h = height;
		//GLFWmonitor* mon = glfwGetPrimaryMonitor();

		//BUG: sometimes fails in Windows 8. Maybe because of old drivers.
		window = glfwCreateWindow(w, h, toStringz(caption), null,  null);
		assert(window);
		glfwMakeContextCurrent(window);
		glfwSwapInterval(0);

		if (window is null)
		{
			throw new Error("Error creating GLFW3 window");
		}

		glClearColor(1.0, 1.0, 1.0, 1.0);
		glViewport(0, 0, w, h);

		DerelictGL3.reload();

		glfwSetWindowUserPointer(window, cast(void*)this);
		glfwSetWindowPosCallback(window, &windowposfun);
		glfwSetWindowSizeCallback(window, &windowsizefun);
		glfwSetWindowCloseCallback(window, &windowclosefun);
		//glfwSetWindowRefreshCallback(window, &windowrefreshfun);
		glfwSetWindowFocusCallback(window, &windowfocusfun);
		glfwSetWindowIconifyCallback(window, &windowiconifyfun);
		glfwSetMouseButtonCallback(window, &mousebuttonfun);
		glfwSetCursorPosCallback(window, &cursorposfun);
		glfwSetScrollCallback(window, &scrollfun);
		glfwSetKeyCallback(window, &keyfun);
		glfwSetCharCallback(window, &charfun);


		//glfwSetCursorEnterCallback(window, GLFWcursorenterfun cbfun);
	}

	override void processEvents()
	{
		glfwPollEvents();
	}

	override double getTime() //in seconds
	{
		return glfwGetTime();
	}

	override void reshape(in uint width, in uint height)
	{
		glViewport(0, 0, cast(GLsizei) width, cast(GLsizei) height);
	}

	override void releaseWindow()
	{
		glfwDestroyWindow(window);
		glfwTerminate();
	}

	override void setMousePosition(in int x, in int y)
	{
		glfwSetCursorPos(window, x, y);
	}

	override ivec2 getMousePosition()
	{
		double x, y;
		glfwGetCursorPos(window, &x, &y);
		return ivec2(cast(int)x, cast(int)y);
	}

	override void swapBuffer()
	{
		glfwSwapBuffers(window);
	}

	override void grabMouse(){}

	override void releaseMouse(){}

	void setSize(int width, int height)
	{
		glfwSetWindowSize(window, width, height);
	}

	override uvec2 getSize()
	{
		int width, height;
		glfwGetWindowSize(window, &width, &height);
		return uvec2(width, height);
	}

	override string getClipboard()
	{
		const(char*) data = glfwGetClipboardString(window);
		if (data is null) return "";
		return ZToString(data);
	}

	override void setClipboard(string newClipboardString)
	{
		glfwSetClipboardString(window, toStringz(newClipboardString));
	}

	override bool isKeyPressed(uint key)
	{
		return glfwGetKey(window, key) == GLFW_PRESS;
	}

	@property
	{
		override uint width(){ return w; }

		override uint width(in uint newWidth){ return w = newWidth;}

		override uint height(){ return h; }

		override uint height(in uint newHeight){ return h = newHeight;}
	}

protected:

	static void initGlfw()
	{
		DerelictGLFW3.load();
		DerelictGL3.load();

		glfwSetErrorCallback(&errorfun);

		if (glfwInit() == 0)
		{
			throw new Error("Error initializing GLFW3");	//TODO: add proper error handling
		}

		glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
		glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 2);
		glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);


		//glfwSetMonitorCallback(GLFWmonitorfun cbfun);

		glfwInited = true;
	}

private:


	GLFWwindow*		window;
	int 	w = 800, h = 600;

	bool _mouseGrabbed = false;

	static bool		glfwInited = false;
	static GlfwWindow[uint] windows;
	static uint nextWinId = 1;
}

static GlfwWindow getWinFromUP(GLFWwindow* w)
{
	GlfwWindow win;
	win = cast(GlfwWindow) glfwGetWindowUserPointer(w);
	return win;
}

extern(C)
{
	static void errorfun(int errorCode, const(char)* msg)
	{
		throw new Error("GLFW error ocured ["~to!string(errorCode)~"] : "~ZToString(msg));
	}
	static void windowposfun(GLFWwindow* w, int nx, int ny)
	{
		getWinFromUP(w).windowMoved(nx, ny);
	}
	static void windowsizefun(GLFWwindow* w, int nw, int nh)
	{
		GlfwWindow win = getWinFromUP(w);
		win.width = nw;
		win.height = nh;
		win.windowResized(nw, nh);
	}
	static void windowclosefun(GLFWwindow* w)
	{
		getWinFromUP(w).quit();
	}
	static void windowrefreshfun(GLFWwindow* w)
	{

	}
	static void windowfocusfun(GLFWwindow* w, int focus)
	{
		getWinFromUP(w).focusChanged(cast(bool)focus);
	}
	static void windowiconifyfun(GLFWwindow* w, int iconified)
	{
		getWinFromUP(w).windowIconified(cast(bool)iconified);
	}
	static void mousebuttonfun(GLFWwindow* w, int mouseButton, int action, int)
	{
		if(action == GLFW_RELEASE)
		{
			getWinFromUP(w).mouseReleased(mouseButton);
		}
		else
		{
			getWinFromUP(w).mousePressed(mouseButton);
		}
	}
	static void cursorposfun(GLFWwindow* w, double nx, double ny)
	{
		getWinFromUP(w).mouseMoved(cast(int)nx, cast(int)ny);
	}
	static void scrollfun(GLFWwindow* w, double x, double y)
	{
		getWinFromUP(w).wheelScrolled(x, y);
	}
	static void cursorenterfun(GLFWwindow* w, int)
	{

	}
	static void keyfun(GLFWwindow* w, int key, int action, int)
	{
		if (action == GLFW_RELEASE)
		{
			getWinFromUP(w).keyReleased(key);
		}
		else
		{
			getWinFromUP(w).keyPressed(key);
		}
	}
	static void charfun(GLFWwindow* w, uint unicode)
	{
		getWinFromUP(w).charReleased(cast(dchar)unicode);
	}
}
/*
Copyright (c) 2013 Andrey Penechko

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license the "Software" to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module anchovy.utils.streamutils;

version=TestPrint;

private import std.bitmanip;
import std.stdio;
import std.string;


class StreamUtilsException:Exception{
	this(string msg){super(msg);}
}
///
pure T Peek(T)(ref ubyte[] inData){
	Check!T(inData);
	ubyte[T.sizeof] staticValue= inData[0..T.sizeof];
	return bigEndianToNative!T(staticValue);
}

///Peeks the value from the begining of the stream and Crops it
T Read(T)(ref ubyte[] inData){
	Check!T(inData);
	ubyte[T.sizeof] staticValue= inData[0..T.sizeof];
	Crop!(T,false)(inData);

	return bigEndianToNative!T(staticValue);
}

///Crops the value from the begining of the stream. If chek is true it will check if cropping is possible
void Crop(T, bool check = true)(ref ubyte[] inData){
	static if(check){
		Check!T(inData);
		inData = inData[T.sizeof..$];
	}else
		inData = inData[T.sizeof..$];
}

void Check(T)(ref ubyte[] inData){
	if(inData.length<T.sizeof)
		throw new StreamUtilsException(format("Not enough data to read: need %s, got %s",T.sizeof,inData.length));
}

//
unittest{
	ubyte[] inData=[1,1,1];

}

nothrow void Write(T)(ref ubyte[] outData, T var){
	outData~= nativeToBigEndian!T(var);
}

//Write and Read unittest
unittest{
	ubyte[] outStream;
	Write!(bool)(outStream, true);
	Write!(bool)(outStream, false);
	Write!(byte)(outStream, -69);
	Write!(ubyte)(outStream, 69);
	Write!(short)(outStream, -20000);
	Write!(ushort)(outStream, 65000);
	Write!(int)(outStream, -1234567);
	Write!(uint)(outStream, 12345678);
	Write!(float)(outStream, 3.14159);
	Write!(double)(outStream, 3.141592);
	Write!(long)(outStream, 12345679);
	Write!(ulong)(outStream, 123456790);

	size_t dataLength = bool.sizeof*2 + byte.sizeof*2 + short.sizeof*2 + int.sizeof*2 + float.sizeof + double.sizeof +
		long.sizeof*2;

	assert(outStream.length==dataLength);
	assert(Read!(bool)(outStream)==true);
	assert(Read!(bool)(outStream)==false);
	assert(Read!(byte)(outStream)==-69);
	assert(Read!(ubyte)(outStream)==69);
	assert(Read!(short)(outStream)==-20000);
	assert(Read!(ushort)(outStream)==65000);
	assert(Read!(int)(outStream)==-1234567);
	assert(Read!(uint)(outStream)==12345678);
	assert(Read!(float)(outStream)==3.14159f);
	assert(Read!(double)(outStream)==3.141592f);
	assert(Read!(long)(outStream)==12345679);
	assert(Read!(ulong)(outStream)==123456790);
	version(TestPrint){writeln("SUCCESS: Write(T)(T var, ref ubyte[] outData)");}
}

/**
 * Reads array of elements of type T from byte array data and changes data to point to slice after this array.
 * The elements in stream are stored in Big Endian.
 * If length of stream in less then length of inquired data then empty array is returned.
 *
 * Returns: array of type T
 */
T[] ReadArray(T)(ref ubyte[] inData, uint length){
	T[] returnValue;

	if(inData.length<T.sizeof*length)
		throw new StreamUtilsException(format("Not enough data to read: need %s, got %s",(T.sizeof)*length,inData.length));

	for(size_t i=0;i<length;++i){

		ubyte[T.sizeof] staticValue= inData[0..T.sizeof];
		returnValue ~= bigEndianToNative!T(staticValue);
		inData=inData[T.sizeof..$];//pop the data from begining.
	}

	return returnValue;
}


//ReadArray unittest
unittest{
	ubyte[] inData=[0,0,0,10,0,0,1,1,0,1,1,1];

	ubyte[] tempData=inData;
	uint[] outData1=ReadArray!(uint)(tempData,3);

	assert(outData1==[10,257,65793]);
	assert(tempData.length==0);

	/////////
	tempData=inData;
	float[] outData2=ReadArray!(float)(tempData,2);
	assert(tempData.length==4);
	writeln(outData2);
	assert(tempData.length==float.sizeof);


	writeln("SUCCESS: ReadArray(T)(ref ubyte[] data, uint num)");
}

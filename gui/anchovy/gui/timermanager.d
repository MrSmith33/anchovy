/*
Copyright (c) 2013 Andrey Penechko

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license the "Software" to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module anchovy.gui.timermanager;

public import anchovy.gui.timer;

import core.time;
import std.array;
import std.algorithm;
import std.math: isNaN;
import std.stdio;

import anchovy.core.types;

class TimerManager
{
	this(double delegate() currentTimeCallback)
	in
	{
		assert(currentTimeCallback);
	}
	body
	{
		freeTimers.reserve(128);
		queue.reserve(128);
		currentTime = currentTimeCallback;
	}

	void updateTimers(double currentTime)
	{
		while(!queue.empty)
		{
			foreach(i, t; queue)
			{
				if (currentTime < t.nextUpdateTime)
					return;
				t.tick(currentTime);
				if (t.nextUpdateTime <= 0 || isNaN(t.nextUpdateTime))
				{
					freeTimers ~= t;
					queue = queue[0..i] ~ queue[i + 1..$];
					break;
				}
				if (t.tickType == TimerTickType.PROCESS_ALL_ORDERED)
				{
					break;
				}
			}
			sortTimers();
		}
	}

	/// 	initialDelay can be used to specify first delay to be different from following, that are set with delay parameter.
	/// 				Must be not NaN and > 0 to be used as first delay.
	Timer addTimer(double _delay, TimerHandler _handler, double _initialDelay = double.nan, TimerTickType _tickType = TimerTickType.init)
	{
		Timer timer = popFreeTimer();

		double startTime = currentTime();

		if (!isNaN(_initialDelay) || _initialDelay < 0)
		{
			startTime += _initialDelay;
		}
		else
			startTime += _delay;

		timer.init(startTime, currentTime(), _delay, _handler, _tickType);
		addToQueue(timer);

		return timer;
	}

	/// Resets timer's delay to newDelay if > 0 or to timer.delay otherwise.
	/// 
	/// Timer.delay will not be changed. Timer.nextUpdate only chabges.
	/// If you wish change Timer.delay you can do this by returning new delay in timer callback or 
	/// by setting it directly trough the reference returned by addTimer.
	void resetTimer(Timer timer, double newDelay = double.nan)
	{
		double _delay = newDelay;
		if (!(_delay > 0)) _delay = timer.delay;
		timer.nextUpdateTime = currentTime() + _delay;

		sortTimers();
	}

	void stopTimer(Timer timer)
	{
		foreach(i, ref t; queue)
		{
			if (t == timer)
			{
				freeTimers ~= t;
				queue = queue[0..i] ~ queue[i + 1..$];
				return;
			}
		}

		debug throw new Exception("Tried to stop not running timer");
	}

protected:

	Timer popFreeTimer()
	{
		if (freeTimers.length > 0)
		{
			scope(exit) freeTimers.popBack;
			return freeTimers.back;
		}
		else
		{
			return new Timer();
		}
	}

	/// timer must be previously removed from freeTimers.
	void addToQueue(Timer timer)
	{
		queue ~= timer;
		sortTimers();
	}

	void sortTimers()
	{
		sort!("a.nextUpdateTime<b.nextUpdateTime")(queue);
	}

	Timer[]	freeTimers;
	Timer[] queue;

	double delegate()	currentTime;
}
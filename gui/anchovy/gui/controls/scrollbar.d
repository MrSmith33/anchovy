/*
Copyright (c) 2013 Andrey Penechko

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license the "Software" to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module anchovy.gui.controls.scrollbar;

import anchovy.gui.all;

alias Scrollbar!true HScrollbar;
alias Scrollbar!false VScrollbar;

/// Scrollbar widget
/// 
/// If template parameter horizontal == true, then scrollbar is horizontal and uses
/// scrollbody_hori, scrollleft, scrollright, scrollslider styles for its parts. Otherwise it is vertical
/// and uses scrollbody_vert, scrollup, scrolldown, scrollslider styles.
/// 
/// See_Also: HScrollbar, VScrollbar
class Scrollbar(bool horizontal) : GuiWidgetContainer
{
	this(Rect initRect, in string initStyleName = "scrollbar", GuiSkin initSkin = null)
	{
		super(initRect, initStyleName, initSkin);
	}

	override void drawBackground(IGuiRenderer renderer)
	{
	}

	override void init()
	{
		if (_skin !is null)
		{
			static if(horizontal)
			{
				if (auto style = _skin["scrollleft"])
					_rect.height = style["normal"].minSize.y;
			}
			else
			{
				if (auto style = _skin["scrollup"])
					_rect.width = style["normal"].minSize.x;
			}
		}

		static if(horizontal)			
		{
			addWidget(new ImageButton(Rect(_rect.height, 0, _rect.width - _rect.height * 2, _rect.height), "scrollbody_hori"));
			addWidget(new ImageButton(Rect(0, 0, _rect.height, _rect.height), "scrollleft"));
			addWidget(new ImageButton(Rect(_rect.width - _rect.height, 0, _rect.height, _rect.height), "scrollright"));
			auto slider = new Draggable(Rect(_rect.height, 0, (_rect.width - _rect.height * 2)/2, _rect.height), "scrollslider");
			slider.onDrag = &handleScrollDrag;
			addWidget(slider);
		}
		else
		{
			addWidget(new ImageButton(Rect(0, _rect.width, _rect.width, _rect.height - _rect.width * 2), "scrollbody_vert"));
			addWidget(new ImageButton(Rect(0, 0, _rect.height, _rect.height), "scrollup"));
			addWidget(new ImageButton(Rect(_rect.width - _rect.height, 0, _rect.height, _rect.height), "scrolldown"));
			auto slider = new Draggable(Rect(0, _rect.width, _rect.width, (_rect.height - _rect.width * 2)/2), "scrollslider");
			slider.onDrag = &handleScrollDrag;
			addWidget(slider);
		}
	}

	override void handleResize() @trusted
	{
		updateComponents();
	}

	protected void handleScrollDrag(IWidget widget, ref ivec2 deltaPosition)
	{
		int delta = 0;
		// Check for borders
		static if(horizontal)
		{
			deltaPosition.y = 0;
			if (widget.x + deltaPosition.x < _children[1].width)
			{
				deltaPosition.x = _children[1].width - widget.x;
			}
			else if (widget.x + widget.width + deltaPosition.x > _scrollBodySize + _children[1].width)
			{
				deltaPosition.x = (_scrollBodySize + _children[1].width) - (widget.x + widget.width);
			}
		}
		else
		{
			deltaPosition.x = 0;
			if (widget.y + deltaPosition.y < _children[1].height)
			{
				deltaPosition.y = _children[1].height - widget.y;
			}
			else if (widget.y + widget.height + deltaPosition.y > _scrollBodySize + _children[1].height)
			{
				deltaPosition.y = (_scrollBodySize + _children[1].height) - (widget.y + widget.height);
			}
		}
	}

	override protected void skinChanged()
	{
		foreach (widget; _children)
		{
			widget.handleParentSkinChange();
		}
		updateComponents();
	}

	protected void updateComponents()
	{
		static if(horizontal)
		{
			_scrollBodySize = _rect.width - (_children[1].width + _children[2].width);

			_children[0].position = ivec2(_children[1].width, 0);
			_children[0].width = _scrollBodySize;
			_children[1].position = ivec2(0, 0);
			_children[2].position = ivec2(_children[1].width + _scrollBodySize, 0);
			_children[3].width = to!uint(_sliderRatio * _scrollBodySize);
			if ((_children[3].x + _children[3].width) > _children[2].x)
			{
				_children[3].x =  (_children[2].x - _children[3].width);
			}
		}
		else
		{
			_scrollBodySize = _rect.height - (_children[1].height + _children[2].height);
			
			_children[0].position = ivec2(0, _children[1].height);
			_children[0].height = _scrollBodySize;
			_children[1].position = ivec2(0, 0);
			_children[2].position = ivec2(0, _children[1].height + _scrollBodySize);
			_children[3].height = to!uint(_sliderRatio * _scrollBodySize);
			if ((_children[3].y + _children[3].height) > _children[2].y)
			{
				_children[3].y =  (_children[2].y - _children[3].height);
			}
		}
	}

	/// Specifies slider size relative to the whole scrollbar.
	/// If value > 1.0 it will be set down to 1.0.
	/// If value < 0.0 it will be set to 0.0 and slider will have the smallest size that skin allows.
	/// ---
	/// scrollbar.sliderRatio = 0.1; // slider is 10x smaller than scrollbar.
	/// ---
	void sliderRatio(float newSliderRatio) @property
	{
		_sliderRatio = newSliderRatio;
		if (_sliderRatio > 1.0)
			_sliderRatio = 1.0;
		if (_sliderRatio < 0.0)
			_sliderRatio = 0.0;

		static if(horizontal)
			_children[3].width = to!uint(_sliderRatio * _scrollBodySize);
		else
			_children[3].height = to!uint(_sliderRatio * _scrollBodySize);
	}

private:

	/// Provides size ratio for the slider.
	/// Scroll viewport / canvas size
	float _sliderRatio = 0.5; // (0; 1]

	/// Position of slider in pixels begining from the left/top border of scroll body.
	/// slider.width/height + _sliderPos <= scrollBody.width/height
	uint _sliderPos = 0;

	/// Stores width/height of scrollbody in pixels for future use.
	uint _scrollBodySize = 0;
}


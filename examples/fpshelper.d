/*
Copyright (c) 2013 Andrey Penechko

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license the "Software" to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module fpshelper;

import core.thread;

/++
 + Helper for measuring frames per second and setting static FPS.
 + Usually needs to be located as field of game class.
 +/
struct FpsHelper
{
	void delegate(ref FpsHelper helper) onFpsUpdate;

	/// fps will be updated each updateInterval seconds
	float updateInterval = 0.5;

	/// Stores actual FPS value
	float fps = 0;

	/// Stores last delta time passed into update()
	float deltaTime;

	/// Stores amount of updates between 
	size_t fpsTicks;

	/// Accumulates time before reaching update interval
	float secondsAccumulator = 0;

	bool limitFps = true;

	uint maxFps = 60;

	/// Delta time value will clamped to meet interval [0;timeLimit].
	/// This can prevent from value lags when entering hibernation or resizing the window.
	float timeLimit = 1;

	void update(float dt)
	{
		if (dt > timeLimit)
		{
			dt = timeLimit;
		}
		deltaTime = dt;

		++fpsTicks;
		secondsAccumulator += dt;

		if (secondsAccumulator >= updateInterval)
		{
			fps = fpsTicks/secondsAccumulator;
			secondsAccumulator -= updateInterval;
			fpsTicks = 0;
			if (onFpsUpdate !is null) onFpsUpdate(this);
		}
	}

	void sleepAfterFrame(float frameTime)
	{
		if (limitFps)
		{
			uint msecs = cast(uint)((1/cast(float)maxFps - frameTime)*1000);
			Thread.sleep(dur!"msecs"(msecs>2? msecs - 1: msecs));
		}
	}
}


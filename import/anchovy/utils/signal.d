/*
Copyright (c) 2013 Andrey Penechko

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining num copy of the software and accompanying documentation covered by
this license the "Software" to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
num source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR num PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module anchovy.utils.signal;

import std.algorithm : countUntil;
import std.functional : toDelegate, DelegateFaker;
import std.traits : isDelegate, ParameterTypeTuple, isFunctionPointer;

import std.stdio;

struct Signal(Args...)
{
	alias SlotType = void delegate(Args);

	SlotType[] slots;

	void emit(Args args) @trusted
	{
		foreach(slot; slots)
			slot(args);
	}

	void connect(Slot)(Slot slot) @trusted if(is(ParameterTypeTuple!Slot == Args))
	{
		static if(isDelegate!Slot)
		{
			slots ~= slot;
		}
		else static if(isFunctionPointer!Slot)
		{
			slots ~= toDelegate(slot);
		}
	}

	void disconnect(Slot)(Slot slot) @trusted
	{
		static if(isDelegate!Slot)
		{
			auto haystackPos = countUntil(slots, slot);

			if(haystackPos >= 0)
			{
				slots = slots[0..haystackPos] ~ slots[haystackPos+1 .. $];
			}
		}
		else static if(isFunctionPointer!Slot)
		{
			// struct from functional toDelegate
			static struct DelegateFields {
	            union {
	                SlotType del;
	                //pragma(msg, typeof(del));

	                struct {
	                    void* contextPtr;
	                    void* funcPtr;
	                }
	            }
	        }

	        auto haystackPos = countUntil!((SlotType _slot, ){return (cast(DelegateFields)_slot).contextPtr == slot;})(slots);

			if(haystackPos >= 0)
			{
				slots = slots[0..haystackPos] ~ slots[haystackPos+1 .. $];
			}
		}
		
	}

	void disconnectAll() @trusted
	{
		slots = [];
	}
}

// Test for signal with 0 arguments
unittest
{
	Signal!() test1; // Signal for slots not taking any parameters.

	auto num = 0;
	auto slot = (){num += 1;}; // Slot is plain delegate.
	test1.connect(slot);
	assert(num == 0); // Slot doesn't gets called upon connecting.

	test1.emit();
	assert(num == 1); // Each connected slot is called only once.

	test1.disconnect(slot);
	assert(num == 1); // Doesn't called upon disconnecting.

	test1.emit();
	assert(num == 1); 
}

// Test for signal with 1 argument
unittest
{
	// Slot that takes one argument.
	// Slots can have any number of parameters.
	Signal!int test2; 

	auto num = 0;
	auto slot = (int increment){num += increment;};
	test2.connect(slot);
	assert(num == 0);

	test2.emit(3);
	assert(num == 3);

	test2.disconnect(slot);
	assert(num == 3);

	test2.emit(4);
	assert(num == 3);
}

// Test for multiple slots
unittest
{
	Signal!int test3;

	auto num = 0;
	auto slot1 = (int inc){num += inc;};
	auto slot2 = (int mult){num *= mult;};

	test3.connect(slot1);
	test3.connect(slot2);
	assert(num == 0);

	test3.emit(2);
	assert(num == 4);

	test3.connect(slot1);
	test3.emit(3);
	assert(num == (4 + 3) * 3 + 3); // 24

	test3.disconnect(slot1);
	test3.emit(2);
	assert(num == 24 * 2 + 2); // 50

	test3.disconnectAll();
	test3.emit(4);
	assert(num == 50);
}

// Test for static slots
unittest
{
	Signal!(int*, int) test4;

	auto num = 0;
	// Testing static functions. 
	static void staticSlot(int* num, int inc){*num += inc;}

	test4.connect(&staticSlot);
	assert(num == 0);

	test4.emit(&num, 2);
	assert(num == 2);

	test4.disconnect(&staticSlot);
	test4.emit(&num, 2);
	assert(num == 2);
}
/*
Copyright (c) 2013 Andrey Penechko

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license the "Software" to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module anchovy.graphics.windows.glfwwindow;

private
{
	import std.conv : to;
	import std.stdio;
	import std.string;
	import anchovy.core.interfaces.iwindow;
}

public
{
	import derelict.glfw3.glfw3;
	import derelict.opengl3.gl3;
	import anchovy.utils.string;
}

class GlfwWindow : IWindow
{
public:

	override void init(uvec2 size, in string caption)
	{
		if (!glfwInited)
		{
			initGlfw();
		}

		scope(failure) glfwTerminate();

		_size = size;

		//BUG: sometimes fails in Windows 8. Maybe because of old drivers.
		_window = glfwCreateWindow(_size.x, _size.y, toStringz(caption), null,  null);

		if (_window is null)
		{
			throw new Error("Error creating GLFW3 window");
		}

		glfwMakeContextCurrent(_window);
		glfwSwapInterval(0);

		glClearColor(1.0, 1.0, 1.0, 1.0);
		glViewport(0, 0, _size.x, _size.y);

		DerelictGL3.reload();

		glfwSetWindowUserPointer(_window, cast(void*)this);
		glfwSetWindowPosCallback(_window, &windowposfun);
		glfwSetFramebufferSizeCallback(_window, &windowsizefun);
		glfwSetWindowCloseCallback(_window, &windowclosefun);
		//glfwSetWindowRefreshCallback(_window, &windowrefreshfun);
		glfwSetWindowFocusCallback(_window, &windowfocusfun);
		glfwSetWindowIconifyCallback(_window, &windowiconifyfun);
		glfwSetMouseButtonCallback(_window, &mousebuttonfun);
		glfwSetCursorPosCallback(_window, &cursorposfun);
		glfwSetScrollCallback(_window, &scrollfun);
		glfwSetKeyCallback(_window, &keyfun);
		glfwSetCharCallback(_window, &charfun);


		//glfwSetCursorEnterCallback(window, GLFWcursorenterfun cbfun);
	}

	override void processEvents()
	{
		glfwPollEvents();
	}

	override double elapsedTime() @property //in seconds
	{
		return glfwGetTime();
	}

	override void reshape(uvec2 viewportSize)
	{
		glViewport(0, 0, cast(int)viewportSize.x, cast(int)viewportSize.y);
	}

	override void releaseWindow()
	{
		glfwDestroyWindow(_window);
		glfwTerminate();
	}

	override void mousePosition(ivec2 newPosition) @property
	{
		glfwSetCursorPos(_window, newPosition.x, newPosition.y);
	}

	override ivec2 mousePosition() @property
	{
		double x, y;
		glfwGetCursorPos(_window, &x, &y);
		return ivec2(cast(int)x, cast(int)y);
	}

	override void swapBuffers()
	{
		glfwSwapBuffers(_window);
	}

	override void grabMouse(){}

	override void releaseMouse(){}

	override void size(uvec2 newSize) @property
	{
		glfwSetWindowSize(_window, cast(int)newSize.x, cast(int)newSize.y);
	}

	override uvec2 size() @property
	{
		int width, height;
		glfwGetWindowSize(_window, &width, &height);
		return uvec2(cast(uint)width, cast(uint)height);
	}

	override string clipboardString() @property
	{
		const(char*) data = glfwGetClipboardString(_window);
		if (data is null) return "";
		return ZToString(data);
	}

	override void clipboardString(string newClipboardString) @property
	{
		glfwSetClipboardString(_window, toStringz(newClipboardString));
	}

	override bool isKeyPressed(uint key)
	{
		return glfwGetKey(_window, key) == GLFW_PRESS;
	}

protected:

	static void initGlfw()
	{
		glfwSetErrorCallback(&errorfun);

		if (glfwInit() == 0)
		{
			throw new Error("Error initializing GLFW3"); //TODO: add proper error handling
		}

		glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
		glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 1);
		//glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

		glfwInited = true;
	}

private:


	GLFWwindow*	_window;
	uvec2 _size;

	bool _mouseGrabbed = false;

	static bool	glfwInited = false;
}

static GlfwWindow getWinFromUP(GLFWwindow* w) nothrow
{
	GlfwWindow win;
	win = cast(GlfwWindow) glfwGetWindowUserPointer(w);
	return win;
}

extern(C)
{
	static void errorfun(int errorCode, const(char)* msg) nothrow
	{
		throw new Error("GLFW error ocured ["~to!string(errorCode)~"] : "~ZToString(msg));
	}
	static void windowposfun(GLFWwindow* w, int nx, int ny) nothrow
	{
		try
		{
			getWinFromUP(w).windowMoved.emit(ivec2(nx, ny));
		}
		catch(Exception e)
		{
			throw new Error(to!string(e));
		}
	}
	static void windowsizefun(GLFWwindow* w, int newWidth, int newHeight) nothrow
	{
		try
		{
			getWinFromUP(w).windowResized.emit(uvec2(cast(uint)newWidth, cast(uint)newHeight));
		}
		catch(Exception e)
		{
			throw new Error(to!string(e));
		}
	}
	static void windowclosefun(GLFWwindow* w) nothrow
	{
		try
		{
			getWinFromUP(w).closePressed.emit();//------------------
		}
		catch(Exception e)
		{
			throw new Error(to!string(e));
		}
	}
	static void windowrefreshfun(GLFWwindow* w) nothrow
	{

	}
	static void windowfocusfun(GLFWwindow* w, int focus) nothrow
	{
		try
		{
			getWinFromUP(w).focusChanged.emit(cast(bool)focus);
		}
		catch(Exception e)
		{
			throw new Error(to!string(e));
		}
	}
	static void windowiconifyfun(GLFWwindow* w, int iconified) nothrow
	{
		try
		{
			getWinFromUP(w).windowIconified.emit(cast(bool)iconified);
		}
		catch(Exception e)
		{
			throw new Error(to!string(e));
		}
	}
	static void mousebuttonfun(GLFWwindow* w, int mouseButton, int action, int) nothrow
	{
		try
		{
			if(action == GLFW_RELEASE)
			{
				getWinFromUP(w).mouseReleased.emit(mouseButton);
			}
			else
			{
				getWinFromUP(w).mousePressed.emit(mouseButton);
			}
		}
		catch(Exception e)
		{
			throw new Error(to!string(e));
		}
	}
	static void cursorposfun(GLFWwindow* w, double nx, double ny) nothrow
	{
		try
		{
			getWinFromUP(w).mouseMoved.emit(ivec2(cast(int)nx, cast(int)ny));
		}
		catch(Exception e)
		{
			throw new Error(to!string(e));
		}
	}
	static void scrollfun(GLFWwindow* w, double x, double y) nothrow
	{
		try
		{
			getWinFromUP(w).wheelScrolled.emit(dvec2(x, y));
		}
		catch(Exception e)
		{
			throw new Error(to!string(e));
		}
	}
	static void cursorenterfun(GLFWwindow* w, int) nothrow
	{

	}
	static void keyfun(GLFWwindow* w, int key, int, int action, int) nothrow
	{
		try
		{
			if (action == GLFW_RELEASE)
			{
				getWinFromUP(w).keyReleased.emit(key);
			}
			else
			{
				getWinFromUP(w).keyPressed.emit(key);
			}
		}
		catch(Exception e)
		{
			throw new Error(to!string(e));
		}
	}
	static void charfun(GLFWwindow* w, uint unicode) nothrow
	{
		try
		{
			getWinFromUP(w).charEntered.emit(cast(dchar)unicode);
		}
		catch(Exception e)
		{
			throw new Error(to!string(e));
		}
	}
}
